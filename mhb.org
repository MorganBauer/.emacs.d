#+TITLE: emacs configuration file

* general notes
variables are prefixed with my initials, mhb, to attempt to provide uniqueness

**  Open the loaded config file, wherever it is
#+BEGIN_SRC emacs-lisp
(defun mhb-find-file-config ()
  (interactive)
  (find-file user-init-file))
#+END_SRC

** separate out custom usage

This usually ends up appended to init.el even when I don't change anything.
So let's put it in a separate file, and stop clobbering init.el with nonsense.

The only thing that reasonably should end up here is the list of installed packages to load,
and those should essentially come from whatever is defined as being use-package'd from this file.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file t) ; load with NOERROR set so that if it does not exist there is no problem
#+END_SRC

* template for adding code
#+begin_src emacs-lisp
#+end_src

* startup profiling message
#+begin_src emacs-lisp
;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; how to check for the native-comp availability from emacs 28 on
;; (fboundp 'native-comp-available-p)
;; (native-comp-available-p)
#+end_src

* debug file loading
debug what is loading the deprecated 'cl package
(require 'loadhist)
(file-dependents (feature-file 'cl))

set this as early as possible to take effect
(setopt debug-on-error 't)

* future work

what is abbrev tables? abbrev_defs file?

* notes on keys

** to reformat the buffer
C-x h to highlight/select/mark the whole buffer
C-M-\ to run indent-region

** fix marking on mac os by disabling input source switching [2023-05-01 Mon]
https://emacs.stackexchange.com/questions/21285/set-mark-command-c-spc-not-recognised-broken/21311#21311

** recentering and cursor movement - also see scrolling
M-r to move cursor around on screen, middle, top, bottom.
I don't find this terribly useful.

C-l recenters the current line, top, bottom, middle.
This is nice for aligning buffers to visually diff them.

* packages beyond the default 
#+begin_src emacs-lisp
#+end_src

* gpg/pgp
#+BEGIN_SRC emacs-lisp
(use-package pinentry
   :ensure t
   :config
   (unless (memq window-system '(w32))
     (pinentry-start)))
#+END_SRC

* interface stuff
Configure look and feel.
#+begin_src emacs-lisp
(setopt scroll-conservatively 3)

(use-package zenburn-theme
  :config (enable-theme 'zenburn))
;; alternate themes, with enhanced visual accessibility
(use-package modus-themes)

;; misc interface stuff
(show-paren-mode t) ;highlight matching parens
(setopt x-stretch-cursor t) ;show full character widths
(tool-bar-mode 0) ; no clickable gui icons, no floppy disks to save
(size-indication-mode t) ; where in the file the cursor is
(column-number-mode t) ; show column number with line number in mode line
;; setup line numbers
(progn ;; from emacs wiki https://www.emacswiki.org/emacs/LineNumbers <2023-09-04 Mon>
  (when (version<= "26.0.50" emacs-version ) ; enable efficient line numbering in ways that supported
    (global-display-line-numbers-mode))
  (require 'display-line-numbers)

  (defcustom display-line-numbers-exempt-modes
    '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode deft-mode)
    "Major modes on which to disable line numbers."
    :group 'display-line-numbers
    :type 'list
    :version "green")

  (defun display-line-numbers--turn-on ()
    "Turn on line numbers except for certain major modes.
    Exempt major modes are defined in `display-line-numbers-exempt-modes'."
    (unless (or (minibufferp)
                (member major-mode display-line-numbers-exempt-modes))
      (display-line-numbers-mode)))
  (global-display-line-numbers-mode))  ;; end linumbering from emacs wiki

(global-hl-line-mode t)
(setq-default indent-tabs-mode nil)

;; Font settings
;; Test char and monospace:
;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?
;;
;; should I be pushing onto the front of face-font-family-alternatives?
;;
(when (find-font (font-spec :name "IBM Plex Mono"))
  (if (memq window-system '(mac ns))
      ;; size 17 allows two 120 char side by side on the imac
      (setopt default-frame-alist '((font . "IBM Plex Mono 12")))
    ;; size 14 is enough for two 80 side by side at roughly full HD 1080p
    (setopt default-frame-alist '((font . "IBM Plex Mono 14")))))
;; load a backup font on windows to enable emoji
(if (memq window-system '(w32))
    (set-fontset-font t nil "Segoe UI Emoji" nil 'append))
;; tab to complete
(setopt tab-always-indent 'complete)

;; maximize on startup
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; visual-line mode for long lines
(setopt visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(global-visual-line-mode)

;; maybe more understandable undo
(use-package undo-tree)

;; help discoverability with quick-help and which-key
#+end_src

** ido

   #+begin_src emacs-lisp
     ;(require 'ido)
     ;(ido-mode t)
     ;(setq ido-case-fold t)
     ;(setq ido-enable-flex-matching t)
     ;(add-to-list 'ido-ignore-files "BUILD") ; ignore file generated by bazel
   #+end_src

possible replacement in ivy mode, with counsel and swiper
   #+begin_src emacs-lisp
   (use-package ivy
     :ensure t)
   (ivy-mode 1)

   (use-package flx
     :ensure t)
   (setq ivy-re-builders-alist
     '((t . ivy--regex-plus)))

   ;; not sure what this does, +research
   ;;(setq ivy-initial-inputs-alist nil)

   #+end_src



** custom keys
#+begin_src emacs-lisp
;; disable the insert key, which normally invokes overwrite-mode
(global-set-key (kbd "<insert>") 'undefined)
#+end_src

** Needs documentation
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :ensure t)
#+END_SRC

** vterm
Not really remembering to use vterm.
#+begin_src emacs-lisp
;; vterm not compatible with windows
;; but my global emacs syncing means it may get installed
;; paradoxically, always compiling silences any errors that I encounter on windows
#+end_src

* environmental setup
  #+begin_src emacs-lisp
    ;; mac specific stuff ;; mac and ns are the same, in reference to the NextStep that became osx/macos. See also, GnuStep
    (when (memq window-system '(mac ns))
      (setopt mac-command-key-is-meta nil
            mac-command-modifier nil
            mac-option-key-is-meta t
            mac-option-modifier 'meta)
      ;; this relies on having installed gnu coreutils, because normal ls
      ;; doesn't support emacs features
      (let ((has-gnu-ls (executable-find "gls")))
        (if has-gnu-ls
          (setq insert-directory-program has-gnu-ls))))
 #+end_src

* file access
Most of the notices about lockfiles seem to be spurious. I rarely edit
the same file in two different eamcs-es.
  #+begin_src emacs-lisp
  (setopt create-lockfiles nil)
  #+end_src

** time stamps
if a timestamp comment is at the top, update the timestamp
  #+begin_src emacs-lisp
    (setopt
      time-stamp-active t          ; do enable time-stamps
      time-stamp-line-limit 10     ; check first 10 buffer lines for
                                   ; 'Time-stamp:'
      time-stamp-format "%:y-%02m-%02d %02H:%02M:%02S %Z (%u)") ; date format
    (add-hook 'before-save-hook 'time-stamp)
  #+end_src

*** check this out for a key to insert time stamps in the future
 (format-time-string FORMAT-STRING &optional TIME UNIVERSAL)

** auto-save 
#+begin_src emacs-lisp
(setopt vc-make-backup-files t
      version-control t ; Use version numbers for backups.
      kept-new-versions 10 ; Number of newest versions to keep.
      kept-old-versions 1 ; Number of oldest versions to keep.
      delete-old-versions t ; Don't ask to delete excess backup versions.
      backup-by-copying t) ; Copy all files, don't rename them.
;;;  don't pollute the fs
(defconst mhb-auto-save-folder (expand-file-name "auto-save/" user-emacs-directory) "where auto-save files and backups will be stored")
(make-directory mhb-auto-save-folder t) ; make the dir if it doesn't exist

(setopt backup-directory-alist
  (list (cons "." mhb-auto-save-folder)))
(setq auto-save-file-name-transforms
  (list (list "\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (concat mhb-auto-save-folder "\\2"))))

(auto-save-visited-mode)
#+end_src

** tramp
   #+begin_src emacs-lisp
   ;; this is going to need adjustment on windows for ssh and controlmaster
   ;; controlmaster should match ssh/config to reuse those configurations
   (use-package tramp)
   (setopt tramp-default-method "rsync"
         tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='~/.ssh/master-%%r@%%h:%%p' -o ControlPersist=15m")
   #+end_src
* flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :ensure t)
(add-hook 'text-mode-hook 'flyspell-mode)
(setopt flyspell-issue-message-flag nil)
(global-set-key (kbd "<f8>") 'flyspell-buffer)
;; windows configuration for spell check program
#+end_src
* org mode
  interesting thing, is to use 'easy templates'
  to insert a source block, type "<s" and then hit tab.

  works for anything that can be completed.

  You can run the command ‘org-babel-mark-block’ with C-c C-v C-M-h

  #+BEGIN_SRC emacs-lisp
    (use-package org)
    (use-package org-contrib)

    (require 'ob-tangle)
    (require 'ob-dot)
    (require 'ox-latex)
    (require 'org-id)
    ;;(use-package org-journal)

  (setopt org-src-fontify-natively t ; make source code look like source code
          org-src-tab-acts-natively t ; make tab-key work in source code blocks, see fn org-indent-line
          org-src-preserve-indentation nil ;; default, use minimum number of leading spaces
          org-edit-src-content-indentation 0 ;; the minimum number of leading spaces to use.
          org-adapt-indentation nil ; don't hard indent content
          org-log-done 'time  ; add a closed timestamp, useful for blogging
          org-todo-keywords '((sequence "TODO(!/!)" "|" "DONE(!/!)"))
          org-agenda-files '("~/sync/org-notes")
          org-agenda-include-diary t
          org-directory "~/sync/org-notes"
          org-default-notes-file (concat org-directory "/notes.org")
          org-clock-sound t ; actually alert me when something happens
          )
    (add-to-list 'org-babel-load-languages '(dot . t))
    (setopt org-confirm-babel-evaluate nil)

    (use-package ox-hugo
      :ensure t
      :after ox)
  #+END_SRC
* programming languages

   #+begin_src emacs-lisp
   (use-package auto-highlight-symbol
     :ensure t)
   (global-auto-highlight-symbol-mode t)

   (use-package rainbow-delimiters
     :ensure t)
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   #+end_src
** tree-sitter ???
Tree sitter has to be compiled, and a model loaded for each specific
language. In addition, the modes are separate from the normally
available language based modes. For example, go-mode and the
corresponding tree-sitter mode go-ts-mode.

** Language Server Protocol
Many languages are supporting 'language server protocol'

*** eglot

Available by default as of emacs 29.

For now, let's use-package eglot to set it up.

#+begin_src emacs-lisp
(use-package eglot)
#+end_src

*** lsp-mode

lsp-mode is more global than any specific language

copied from https://github.com/golang/tools/blob/master/gopls/doc/emacs.md

Since lsp is reading from a seperate process, and that process usually generates huge json, increase the amount from 4k to 1m.
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

** finding in projects
Generically, start using and getting used to xref.

Think of the left and right angle brackets as go back and go to definition, respecitvely.

The literal chords are:
Alt + ,
Alt + .

If you shift ',' you get '<'. And '.' shifted is '>'.


M-. runs the command xref-find-definitions (found in global-map)

#+begin_src emacs-lisp
(let ((has-ripgrep (executable-find "rg")))
  (if has-ripgrep
      (setopt xref-search-program 'ripgrep)))
#+end_src

;; Company mode is a standard completion package that works well with lsp-mode.
(use-package company
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))

;; Optional - provides snippet support.
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))
#+end_src

  #+BEGIN_SRC emacs-lisp
;; flycheck for everything
(use-package flycheck
  :init (global-flycheck-mode))
  #+END_SRC
** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status))
#+end_src

** shell
*** bats
   #+begin_src emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.bats\\'" . shell-script-mode))
   #+end_src
** lisps
*** elisp - emacs lisp

This is where I put the information on elisp.

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'electric-pair-mode)
#+end_src

*** scheme
    #+begin_src emacs-lisp
    (use-package geiser
      :ensure t
      :config
    ;(setq geiser-repl-use-other-window nil)
    (setq geiser-active-implementations '(guile)
          geiser-default-implementation 'guile)
    )
    (require 'ob-scheme)
    (add-to-list 'org-babel-load-languages '(scheme . t))
    #+end_src
*** common lisp
Warning (emacs): To restore SLIME in this session, customize ‘lisp-mode-hook’
and replace ‘sly-editing-mode’ with ‘slime-lisp-mode-hook’.
Warning (emacs): ‘sly.el’ loaded OK. To use SLY, customize ‘lisp-mode-hook’ and
replace ‘slime-lisp-mode-hook’ with ‘sly-editing-mode’.

#+begin_src emacs-lisp
(use-package slime
  :pin "melpa-stable")
(use-package slime-company)
  ;;(load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; Replace "sbcl" with the path to your implementation
  (let ((has-sbcl (executable-find "sbcl")))
    (if has-sbcl
        (setq inferior-lisp-program "sbcl")))
#+end_src

** rust
   #+begin_src emacs-lisp
     (use-package rust-mode
       :ensure t)

     (setq rust-format-on-save t)
     (add-hook 'rust-mode-hook 'flyspell-prog-mode)
     ; racer mode is rust autocompletion
     (add-hook 'rust-mode-hook #'racer-mode)

     ;;     (with-eval-after-load 'rust-mode
     ;;       (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

     (add-hook 'racer-mode-hook #'eldoc-mode)
     ;;     (add-hook 'racer-mode-hook #'company-mode)

;;   (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  ;;   (setq company-tooltip-align-annotations t)
   #+end_src

** golang
#+begin_src shell
  go get -u -v golang.org/x/tools/cmd/goimports
  go get -u -v github.com/nsf/gocode
  go get -u -v github.com/rogpeppe/godef
  # go guru replaces go oracle
  go get -u -v golang.org/x/tools/cmd/guru
  # golangci-lint replaces gometalinter
  # check https://github.com/golangci/golangci-lint for changing install
  GO111MODULE=on go get golang.org/x/tools/gopls@latest
#+end_src



#+begin_src emacs-lisp
  (use-package flycheck-golangci-lint
    :ensure t
    :hook (go-mode . flycheck-golangci-lint-setup))

(defun mhb/go-before-save-hook ()
  (call-interactively 'eglot-code-action-organize-imports))
(defun mhb/add-gofmt ()
  (when (eq 'go-mode major-mode)
    (add-hook 'before-save-hook 'eglot-format-buffer -10 'local) ;; give formatter slight priority
    (add-hook 'before-save-hook 'mhb/go-before-save-hook nil 'local)))
(add-hook 'go-mode-hook 'mhb/add-gofmt)
(add-hook 'go-mode-hook 'flyspell-prog-mode)

         ;; add tags to structs for things like json/protos/etc
         (use-package go-tag
           :ensure t)
         (setopt go-tag-args (list "-transform" "camelcase"))

(define-key go-mode-map [remap godef-jump] 'xref-find-definitions)

;; eglot hookup
(add-hook 'go-mode-hook #'eglot-ensure)
#+end_src

** R programming statistical language config of ess
   #+begin_src emacs-lisp
   (use-package ess :defer t)
   (add-to-list 'auto-mode-alist '("\\.R\\'" . R-mode))
   (add-to-list 'auto-mode-alist '("\\.r\\'" . R-mode))

   (require 'ob-R)
   (add-to-list 'org-babel-load-languages '(R . t))
   (add-to-list 'org-babel-load-languages '(gnuplot . t))
   #+end_src

** javascript
   #+begin_src emacs-lisp
   (setopt js-indent-level 2)
   #+end_src
** plantuml - uml extensions
  #+BEGIN_SRC emacs-lisp
    (use-package plantuml-mode
      :ensure t)
  #+END_SRC
** latex
  #+BEGIN_SRC emacs-lisp
    ;; auctex is loaded as tex
    (use-package tex
       :ensure auctex)
    (setq TeX-auto-save t
          TeX-parse-self t)
    ;;(use-package ox-moderncv
    ;;    :load-path "path_to_repository/org-cv/"
    ;;    :init (require 'ox-moderncv))
  #+END_SRC

** yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
   :ensure t)
#+END_SRC

** python
ropemacs, pymacs

#+begin_src emacs-lisp
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src
** containers

*** docker
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :hook (k8s-mode . yas-minor-mode))
#+end_src

*** kubernetes
#+begin_src emacs-lisp
(use-package k8s-mode
  :ensure t
  :hook (k8s-mode . yas-minor-mode))
#+end_src

** markdown
Markdown used in many open source projects. Pre-req for some other packages.

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))
#+end_src

* bbdb 
  #+begin_src emacs-lisp
  ;; (use-package bbdb
  ;; :ensure t
  ;;  :init (bbdb-initialize)
  ;; )
  #+end_src

* erc
  the following three lines don't make any sense, but whatever.

  erc config that loads before erc is loaded.
  erc config does not load, until you run erc, so to prime erc, we
  need to have configured it ahead of time

  #+begin_src emacs-lisp
  (use-package erc
    :ensure t)
    ;;  (require 'erc-social-graph)
  #+end_src

* nvalt mode deft

need to look into configuring everything with use-package
(use-package deft
  :bind ("<f8>" . deft)
  :commands (deft)
  :config (setq deft-directory "~/Dropbox/notes"
                deft-extensions '("md" "org")))

deft directory is going to need configuration depending on operating system or
host

  #+begin_src emacs-lisp
  (use-package deft
    :ensure t
    :bind (:map deft-mode-map
           ("C-g" . deft-filter-clear)))
  (setq deft-default-extension "org")
  (setq deft-extensions '("org" "txt" "text" "md" "markdown"))

  (setq deft-directory "~/sync/org-notes/")
  #+end_src

  #+RESULTS:
  : ~/sync/org-notes/

* dired

  #+begin_src emacs-lisp
    (use-package dired
      :ensure nil ;; built-in package, don't try to go find it
      :hook (dired-mode . dired-hide-details-mode)
      :config
      ;; Colourful columns.
      (use-package diredfl
        :config
        (diredfl-global-mode 1)))

    (use-package dired-git-info
        :bind (:map dired-mode-map
                    (")" . dired-git-info-mode)))
  #+end_src

* load some buffers by default

#+begin_src emacs-lisp
(setopt initial-buffer-choice "~/sync/org-notes/todo.org")
(add-hook 'emacs-startup-hook
          (lambda ()
            (goto-char (point-max))))
#+end_src

* prologue - other stuff from initial after-init file

** extra functionality

#+begin_src emacs-lisp
  (use-package uuidgen
      :ensure t)
#+end_src

** desktop configuration
why must this be after everything? I don't think the desktop stuff
works anyway.

  #+begin_src emacs-lisp
;; desktop configuration. automatically save and load emacs buffers.
;;(require 'desktop)
;;(desktop-save-mode t)
;;(defvar mhb-desktop-save-folder "~/.emacs.d/desktop/")
;;(make-directory mhb-desktop-save-folder t) ; make the dir if it doesn't exist
;;(setq desktop-path (list mhb-desktop-save-folder))
;;(setq desktop-dirname mhb-desktop-save-folder)
;;(setq desktop-base-file-name "emacs-desktop")

;;(add-to-list 'desktop-modes-not-to-save 'dired-mode)
;;(add-to-list 'desktop-modes-not-to-save 'Info-mode)
;;(add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
;;(add-to-list 'desktop-modes-not-to-save 'fundamental-mode)

(defun my-desktop-save ()
  (interactive)
  ;; Don't call desktop-save-in-desktop-dir, as it prints a message.
  (if (eq (desktop-owner) (emacs-pid))
      (desktop-save desktop-dirname)))
;;(add-hook 'auto-save-hook 'my-desktop-save)
;; end desktop config
  #+end_src

  #+begin_src emacs-lisp
  #+end_src
